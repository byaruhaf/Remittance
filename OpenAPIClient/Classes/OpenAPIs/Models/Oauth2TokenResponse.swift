//
// Oauth2TokenResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Oauth2TokenResponse: Codable, JSONEncodable, Hashable {

    /** Oauth2 JWT access token.The generated token is valid 3600 seconds as default. */
    public var accessToken: String?
    /** Value is Bearer */
    public var tokenType: String?
    /** Shows when the authentication request ID expires, in seconds. */
    public var expiresIn: Double?
    /** List of scopes that belongs to the authentication request ID. */
    public var scope: String?
    /** UUID of the refresh_token */
    public var refreshToken: String?
    /** The time in seconds until the consent can no longer be refreshed. Based on the default value for consent validity, or the value set to parameter consent_valid_in sent in the bc-authorize request. */
    public var refreshTokenExpiredIn: Int?

    public init(accessToken: String? = nil, tokenType: String? = nil, expiresIn: Double? = nil, scope: String? = nil, refreshToken: String? = nil, refreshTokenExpiredIn: Int? = nil) {
        self.accessToken = accessToken
        self.tokenType = tokenType
        self.expiresIn = expiresIn
        self.scope = scope
        self.refreshToken = refreshToken
        self.refreshTokenExpiredIn = refreshTokenExpiredIn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case accessToken = "access_token"
        case tokenType = "token_type"
        case expiresIn = "expires_in"
        case scope
        case refreshToken = "refresh_token"
        case refreshTokenExpiredIn = "refresh_token_expired_in"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(tokenType, forKey: .tokenType)
        try container.encodeIfPresent(expiresIn, forKey: .expiresIn)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(refreshToken, forKey: .refreshToken)
        try container.encodeIfPresent(refreshTokenExpiredIn, forKey: .refreshTokenExpiredIn)
    }
}

