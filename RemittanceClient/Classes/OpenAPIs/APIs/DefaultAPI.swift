//
// DefaultAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DefaultAPI {

    /**
     * enum for parameter accessType
     */
    public enum AccessType_bcAuthorize: String, CaseIterable {
        case online = "online"
        case offline = "offline"
    }

    /**
     bc-authorize
     
     - parameter authorization: (header) Basic authentication header containing API user ID and API key. Should be sent in as B64 encoded. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter xCallbackUrl: (header) URL to the server where the callback should be sent. (optional)
     - parameter scope: (form)  (optional)
     - parameter loginHint: (form)  (optional)
     - parameter accessType: (form)  (optional)
     - parameter consentValidIn: (form)  (optional)
     - parameter clientNotificationToken: (form)  (optional)
     - parameter scopeInstruction: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func bcAuthorize(authorization: String, xTargetEnvironment: String, xCallbackUrl: String? = nil, scope: String? = nil, loginHint: String? = nil, accessType: AccessType_bcAuthorize? = nil, consentValidIn: Int? = nil, clientNotificationToken: String? = nil, scopeInstruction: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BcauthorizeResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return bcAuthorizeWithRequestBuilder(authorization: authorization, xTargetEnvironment: xTargetEnvironment, xCallbackUrl: xCallbackUrl, scope: scope, loginHint: loginHint, accessType: accessType, consentValidIn: consentValidIn, clientNotificationToken: clientNotificationToken, scopeInstruction: scopeInstruction).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     bc-authorize
     - POST /v1_0/bc-authorize
     - This operation is used to claim a consent by the account holder for the requested scopes.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter authorization: (header) Basic authentication header containing API user ID and API key. Should be sent in as B64 encoded. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter xCallbackUrl: (header) URL to the server where the callback should be sent. (optional)
     - parameter scope: (form)  (optional)
     - parameter loginHint: (form)  (optional)
     - parameter accessType: (form)  (optional)
     - parameter consentValidIn: (form)  (optional)
     - parameter clientNotificationToken: (form)  (optional)
     - parameter scopeInstruction: (form)  (optional)
     - returns: RequestBuilder<BcauthorizeResponse> 
     */
    open class func bcAuthorizeWithRequestBuilder(authorization: String, xTargetEnvironment: String, xCallbackUrl: String? = nil, scope: String? = nil, loginHint: String? = nil, accessType: AccessType_bcAuthorize? = nil, consentValidIn: Int? = nil, clientNotificationToken: String? = nil, scopeInstruction: String? = nil) -> RequestBuilder<BcauthorizeResponse> {
        let localVariablePath = "/v1_0/bc-authorize"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "scope": scope?.encodeToJSON(),
            "login_hint": loginHint?.encodeToJSON(),
            "access_type": accessType?.encodeToJSON(),
            "consent_valid_in": consentValidIn?.encodeToJSON(),
            "client_notification_token": clientNotificationToken?.encodeToJSON(),
            "scope_instruction": scopeInstruction?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
            "X-Callback-Url": xCallbackUrl?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BcauthorizeResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     CashTransfer
     
     - parameter xReferenceId: (header) Format - UUID. Recource ID of the created ‘request-to-pay’ transaction. This ID is used for e.g. validating the status of the request. Universal Unique ID for the transaction generated using UUID version 4. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call (optional)
     - parameter xCallbackUrl: (header) URL to the server where the callback should be sent, Uses PORT method. (optional)
     - parameter cashTransfer: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func cashTransfer(xReferenceId: String, xTargetEnvironment: String, authorization: String? = nil, xCallbackUrl: String? = nil, cashTransfer: CashTransfer? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return cashTransferWithRequestBuilder(xReferenceId: xReferenceId, xTargetEnvironment: xTargetEnvironment, authorization: authorization, xCallbackUrl: xCallbackUrl, cashTransfer: cashTransfer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     CashTransfer
     - POST /v2_0/cashtransfer
     - Cash transfer operation is used to transfer an amount from the owner’s account to a payee account. Status of the transaction can be validated by using GET /cashtransfer/{referenceId}
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter xReferenceId: (header) Format - UUID. Recource ID of the created ‘request-to-pay’ transaction. This ID is used for e.g. validating the status of the request. Universal Unique ID for the transaction generated using UUID version 4. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call (optional)
     - parameter xCallbackUrl: (header) URL to the server where the callback should be sent, Uses PORT method. (optional)
     - parameter cashTransfer: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func cashTransferWithRequestBuilder(xReferenceId: String, xTargetEnvironment: String, authorization: String? = nil, xCallbackUrl: String? = nil, cashTransfer: CashTransfer? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/v2_0/cashtransfer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: cashTransfer)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization?.encodeToJSON(),
            "X-Callback-Url": xCallbackUrl?.encodeToJSON(),
            "X-Reference-Id": xReferenceId.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     CreateAccessToken
     
     - parameter authorization: (header) Basic authentication header containing API user ID and API key. Should be sent in as B64 encoded. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createAccessToken(authorization: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenPost200ApplicationJsonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createAccessTokenWithRequestBuilder(authorization: authorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     CreateAccessToken
     - POST /token/
     - This operation is used to create an access token which can then be used to authorize and authenticate towards the other end-points of the API.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter authorization: (header) Basic authentication header containing API user ID and API key. Should be sent in as B64 encoded. 
     - returns: RequestBuilder<TokenPost200ApplicationJsonResponse> 
     */
    open class func createAccessTokenWithRequestBuilder(authorization: String) -> RequestBuilder<TokenPost200ApplicationJsonResponse> {
        let localVariablePath = "/token/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenPost200ApplicationJsonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     CreateOauth2Token
     
     - parameter authorization: (header) Basic authentication header containing API user ID and API key. Should be sent in as B64 encoded. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter grantType: (form)  (optional)
     - parameter authReqId: (form)  (optional)
     - parameter refreshToken: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createOauth2Token(authorization: String, xTargetEnvironment: String, grantType: String? = nil, authReqId: String? = nil, refreshToken: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Oauth2TokenResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return createOauth2TokenWithRequestBuilder(authorization: authorization, xTargetEnvironment: xTargetEnvironment, grantType: grantType, authReqId: authReqId, refreshToken: refreshToken).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     CreateOauth2Token
     - POST /oauth2/token/
     - This operation is used to claim a consent by the account holder for the requested scopes.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter authorization: (header) Basic authentication header containing API user ID and API key. Should be sent in as B64 encoded. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter grantType: (form)  (optional)
     - parameter authReqId: (form)  (optional)
     - parameter refreshToken: (form)  (optional)
     - returns: RequestBuilder<Oauth2TokenResponse> 
     */
    open class func createOauth2TokenWithRequestBuilder(authorization: String, xTargetEnvironment: String, grantType: String? = nil, authReqId: String? = nil, refreshToken: String? = nil) -> RequestBuilder<Oauth2TokenResponse> {
        let localVariablePath = "/oauth2/token/"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "grant_type": grantType?.encodeToJSON(),
            "auth_req_id": authReqId?.encodeToJSON(),
            "refresh_token": refreshToken?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Oauth2TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GetAccountBalance
     
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountBalance(authorization: String, xTargetEnvironment: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Balance?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountBalanceWithRequestBuilder(authorization: authorization, xTargetEnvironment: xTargetEnvironment).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetAccountBalance
     - GET /v1_0/account/balance
     - Get the balance of own account.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - returns: RequestBuilder<Balance> 
     */
    open class func getAccountBalanceWithRequestBuilder(authorization: String, xTargetEnvironment: String) -> RequestBuilder<Balance> {
        let localVariablePath = "/v1_0/account/balance"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Balance>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GetAccountBalanceInSpecificCurrency
     
     - parameter currency: (path) Should be in ISO4217 Currency 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAccountBalanceInSpecificCurrency(currency: String, authorization: String, xTargetEnvironment: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Balance?, _ error: Error?) -> Void)) -> RequestTask {
        return getAccountBalanceInSpecificCurrencyWithRequestBuilder(currency: currency, authorization: authorization, xTargetEnvironment: xTargetEnvironment).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetAccountBalanceInSpecificCurrency
     - GET /v1_0/account/balance/{currency}
     - Get the balance of own account. Currency parameter passed in GET
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter currency: (path) Should be in ISO4217 Currency 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - returns: RequestBuilder<Balance> 
     */
    open class func getAccountBalanceInSpecificCurrencyWithRequestBuilder(currency: String, authorization: String, xTargetEnvironment: String) -> RequestBuilder<Balance> {
        var localVariablePath = "/v1_0/account/balance/{currency}"
        let currencyPreEscape = "\(APIHelper.mapValueToPathItem(currency))"
        let currencyPostEscape = currencyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{currency}", with: currencyPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Balance>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GetBasicUserinfo
     
     - parameter accountHolderMSISDN: (path) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBasicUserinfo(accountHolderMSISDN: String, authorization: String, xTargetEnvironment: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BasicUserInfoJsonResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getBasicUserinfoWithRequestBuilder(accountHolderMSISDN: accountHolderMSISDN, authorization: authorization, xTargetEnvironment: xTargetEnvironment).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetBasicUserinfo
     - GET /v1_0/accountholder/msisdn/{accountHolderMSISDN}/basicuserinfo
     - This operation returns personal information of the account holder. The operation does not need any consent by the account holder.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter accountHolderMSISDN: (path) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - returns: RequestBuilder<BasicUserInfoJsonResponse> 
     */
    open class func getBasicUserinfoWithRequestBuilder(accountHolderMSISDN: String, authorization: String, xTargetEnvironment: String) -> RequestBuilder<BasicUserInfoJsonResponse> {
        var localVariablePath = "/v1_0/accountholder/msisdn/{accountHolderMSISDN}/basicuserinfo"
        let accountHolderMSISDNPreEscape = "\(APIHelper.mapValueToPathItem(accountHolderMSISDN))"
        let accountHolderMSISDNPostEscape = accountHolderMSISDNPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountHolderMSISDN}", with: accountHolderMSISDNPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BasicUserInfoJsonResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GetCashTransferStatus
     
     - parameter referenceId: (path) UUID of transaction to get result. Reference id  used when creating the CashTransfer. 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCashTransferStatus(referenceId: String, authorization: String, xTargetEnvironment: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CashTransferResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getCashTransferStatusWithRequestBuilder(referenceId: referenceId, authorization: authorization, xTargetEnvironment: xTargetEnvironment).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetCashTransferStatus
     - GET /v2_0/cashtransfer/{referenceId}
     - This operation is used to get the status of a transfer. X-Reference-Id that was passed in the post is used as reference to the request.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter referenceId: (path) UUID of transaction to get result. Reference id  used when creating the CashTransfer. 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - returns: RequestBuilder<CashTransferResult> 
     */
    open class func getCashTransferStatusWithRequestBuilder(referenceId: String, authorization: String, xTargetEnvironment: String) -> RequestBuilder<CashTransferResult> {
        var localVariablePath = "/v2_0/cashtransfer/{referenceId}"
        let referenceIdPreEscape = "\(APIHelper.mapValueToPathItem(referenceId))"
        let referenceIdPostEscape = referenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{referenceId}", with: referenceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CashTransferResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GetTransferStatus
     
     - parameter referenceId: (path) UUID of transaction to get result. Reference id  used when creating the Transfer. 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTransferStatus(referenceId: String, authorization: String, xTargetEnvironment: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TransferResult?, _ error: Error?) -> Void)) -> RequestTask {
        return getTransferStatusWithRequestBuilder(referenceId: referenceId, authorization: authorization, xTargetEnvironment: xTargetEnvironment).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetTransferStatus
     - GET /v1_0/transfer/{referenceId}
     - This operation is used to get the status of a transfer. X-Reference-Id that was passed in the post is used as reference to the request.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter referenceId: (path) UUID of transaction to get result. Reference id  used when creating the Transfer. 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - returns: RequestBuilder<TransferResult> 
     */
    open class func getTransferStatusWithRequestBuilder(referenceId: String, authorization: String, xTargetEnvironment: String) -> RequestBuilder<TransferResult> {
        var localVariablePath = "/v1_0/transfer/{referenceId}"
        let referenceIdPreEscape = "\(APIHelper.mapValueToPathItem(referenceId))"
        let referenceIdPostEscape = referenceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{referenceId}", with: referenceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransferResult>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     GetUserInfoWithConsent
     
     - parameter authorization: (header) Bearer Token. Replace with a valid oauth2 token received from oauth2 token endpoint in Wallet Platform. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getUserInfoWithConsent(authorization: String, xTargetEnvironment: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConsentkycResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getUserInfoWithConsentWithRequestBuilder(authorization: authorization, xTargetEnvironment: xTargetEnvironment).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     GetUserInfoWithConsent
     - GET /oauth2/v1_0/userinfo
     - This operation is used to claim a consent by the account holder for the requested scopes.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter authorization: (header) Bearer Token. Replace with a valid oauth2 token received from oauth2 token endpoint in Wallet Platform. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - returns: RequestBuilder<ConsentkycResponse> 
     */
    open class func getUserInfoWithConsentWithRequestBuilder(authorization: String, xTargetEnvironment: String) -> RequestBuilder<ConsentkycResponse> {
        let localVariablePath = "/oauth2/v1_0/userinfo"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConsentkycResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Transfer
     
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xReferenceId: (header) Format - UUID. Recource ID of the created request to pay transaction. This ID is used, for example validating the status of the request. ‘Universal Unique ID’ for the transaction generated using UUID version 4. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter xCallbackUrl: (header) URL to the server where the callback should be sent. (optional)
     - parameter transfer: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func transfer(authorization: String, xReferenceId: String, xTargetEnvironment: String, xCallbackUrl: String? = nil, transfer: Transfer? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return transferWithRequestBuilder(authorization: authorization, xReferenceId: xReferenceId, xTargetEnvironment: xTargetEnvironment, xCallbackUrl: xCallbackUrl, transfer: transfer).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Transfer
     - POST /v1_0/transfer
     - Transfer operation is used to transfer an amount from the own account to a payee account.<br> Status of the transaction can validated by using the GET /transfer/\\{referenceId\\}
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xReferenceId: (header) Format - UUID. Recource ID of the created request to pay transaction. This ID is used, for example validating the status of the request. ‘Universal Unique ID’ for the transaction generated using UUID version 4. 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter xCallbackUrl: (header) URL to the server where the callback should be sent. (optional)
     - parameter transfer: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func transferWithRequestBuilder(authorization: String, xReferenceId: String, xTargetEnvironment: String, xCallbackUrl: String? = nil, transfer: Transfer? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/v1_0/transfer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transfer)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "X-Callback-Url": xCallbackUrl?.encodeToJSON(),
            "X-Reference-Id": xReferenceId.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     ValidateAccountHolderStatus
     
     - parameter accountHolderId: (path) The AccountHolder number that&#39;s Validated according to the AccountHolder ID type (case Sensitive)&lt;br&gt; msisdn - Mobile Number validated according to ITU-T E.164. Validated with IsMSISDN &lt;br&gt;email - Validated to be a valid e-mail format. Validated with IsEmail 
     - parameter accountHolderIdType: (path) Specifies the type of the party id. Allowed values [msisdn, email, party_code]. 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func validateAccountHolderStatus(accountHolderId: String, accountHolderIdType: String, authorization: String, xTargetEnvironment: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return validateAccountHolderStatusWithRequestBuilder(accountHolderId: accountHolderId, accountHolderIdType: accountHolderIdType, authorization: authorization, xTargetEnvironment: xTargetEnvironment).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     ValidateAccountHolderStatus
     - GET /v1_0/accountholder/{accountHolderIdType}/{accountHolderId}/active
     - Operation is used  to check if an account holder is registered and active in the system.
     - API Key:
       - type: apiKey subscription-key (QUERY)
       - name: apiKeyQuery
     - API Key:
       - type: apiKey Ocp-Apim-Subscription-Key (HEADER)
       - name: apiKeyHeader
     - parameter accountHolderId: (path) The AccountHolder number that&#39;s Validated according to the AccountHolder ID type (case Sensitive)&lt;br&gt; msisdn - Mobile Number validated according to ITU-T E.164. Validated with IsMSISDN &lt;br&gt;email - Validated to be a valid e-mail format. Validated with IsEmail 
     - parameter accountHolderIdType: (path) Specifies the type of the party id. Allowed values [msisdn, email, party_code]. 
     - parameter authorization: (header) Bearer Authentication Token generated using CreateAccessToken API Call 
     - parameter xTargetEnvironment: (header) The identifier of the Wallet Platform system where the transaction shall be processed. This parameter is used to route the request to the Wallet Platform system that will initiate the transaction. 
     - returns: RequestBuilder<Void> 
     */
    open class func validateAccountHolderStatusWithRequestBuilder(accountHolderId: String, accountHolderIdType: String, authorization: String, xTargetEnvironment: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1_0/accountholder/{accountHolderIdType}/{accountHolderId}/active"
        let accountHolderIdPreEscape = "\(APIHelper.mapValueToPathItem(accountHolderId))"
        let accountHolderIdPostEscape = accountHolderIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountHolderId}", with: accountHolderIdPostEscape, options: .literal, range: nil)
        let accountHolderIdTypePreEscape = "\(APIHelper.mapValueToPathItem(accountHolderIdType))"
        let accountHolderIdTypePostEscape = accountHolderIdTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{accountHolderIdType}", with: accountHolderIdTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "X-Target-Environment": xTargetEnvironment.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
