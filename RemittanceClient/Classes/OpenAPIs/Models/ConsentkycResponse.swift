//
// ConsentkycResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ConsentkycResponse: Codable, JSONEncodable, Hashable {

    /** Subject - Identifier for the End-User at the Issuer. */
    public var sub: String?
    /** End-User's full name in displayable form including all name parts. */
    public var name: String?
    /** Given name(s) or first name(s) of the End-User. */
    public var givenName: String?
    /** Surname(s) or last name(s) of the End-User. */
    public var familyName: String?
    /** Middle name(s) of the End-User. */
    public var middleName: String?
    /** End-User's preferred e-mail address. Its value MUST conform to the  RFC 5322 [RFC5322] address specification syntax. */
    public var email: String?
    /** The response value is True if the End-User's e-mail address has been verified;otherwise false. */
    public var emailVerified: Bool?
    /** End-User's gender. */
    public var gender: String?
    /** Preffered language. */
    public var locale: String?
    /** End-User's preferred telephone number */
    public var phoneNumber: String?
    /** The response value is True if the End-User's phone number has been verified; otherwise false. */
    public var phoneNumberVerified: Bool?
    /** User Address */
    public var address: String?
    /** The time the End-User's information was last updated. */
    public var updatedAt: Double?
    /** Account holder status. */
    public var status: String?
    /** The birth date of the account holder. */
    public var birthdate: String?
    /** The credit score of the account holder. */
    public var creditScore: String?
    /** The status of the account holder. */
    public var active: Bool?
    /** Account holder country of birth. */
    public var countryOfBirth: String?
    /** The birth region of the account holder. */
    public var regionOfBirth: String?
    /** The city of birth for the account holder. */
    public var cityOfBirth: String?
    /** Occupation of the account holder. */
    public var occupation: String?
    /** The name of the employer. */
    public var employerName: String?
    /** Type of identification.The first non-expired identification is always chosen. */
    public var identificationType: String?
    /** The value of the identification. */
    public var identificationValue: String?

    public init(sub: String? = nil, name: String? = nil, givenName: String? = nil, familyName: String? = nil, middleName: String? = nil, email: String? = nil, emailVerified: Bool? = nil, gender: String? = nil, locale: String? = nil, phoneNumber: String? = nil, phoneNumberVerified: Bool? = nil, address: String? = nil, updatedAt: Double? = nil, status: String? = nil, birthdate: String? = nil, creditScore: String? = nil, active: Bool? = nil, countryOfBirth: String? = nil, regionOfBirth: String? = nil, cityOfBirth: String? = nil, occupation: String? = nil, employerName: String? = nil, identificationType: String? = nil, identificationValue: String? = nil) {
        self.sub = sub
        self.name = name
        self.givenName = givenName
        self.familyName = familyName
        self.middleName = middleName
        self.email = email
        self.emailVerified = emailVerified
        self.gender = gender
        self.locale = locale
        self.phoneNumber = phoneNumber
        self.phoneNumberVerified = phoneNumberVerified
        self.address = address
        self.updatedAt = updatedAt
        self.status = status
        self.birthdate = birthdate
        self.creditScore = creditScore
        self.active = active
        self.countryOfBirth = countryOfBirth
        self.regionOfBirth = regionOfBirth
        self.cityOfBirth = cityOfBirth
        self.occupation = occupation
        self.employerName = employerName
        self.identificationType = identificationType
        self.identificationValue = identificationValue
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sub
        case name
        case givenName = "given_name"
        case familyName = "family_name"
        case middleName = "middle_name"
        case email
        case emailVerified = "email_verified"
        case gender
        case locale
        case phoneNumber = "phone_number"
        case phoneNumberVerified = "phone_number_verified"
        case address
        case updatedAt = "updated_at"
        case status
        case birthdate
        case creditScore = "credit_score"
        case active
        case countryOfBirth = "country_of_birth"
        case regionOfBirth = "region_of_birth"
        case cityOfBirth = "city_of_birth"
        case occupation
        case employerName = "employer_name"
        case identificationType = "identification_type"
        case identificationValue = "identification_value"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sub, forKey: .sub)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(givenName, forKey: .givenName)
        try container.encodeIfPresent(familyName, forKey: .familyName)
        try container.encodeIfPresent(middleName, forKey: .middleName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailVerified, forKey: .emailVerified)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(phoneNumberVerified, forKey: .phoneNumberVerified)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(birthdate, forKey: .birthdate)
        try container.encodeIfPresent(creditScore, forKey: .creditScore)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(countryOfBirth, forKey: .countryOfBirth)
        try container.encodeIfPresent(regionOfBirth, forKey: .regionOfBirth)
        try container.encodeIfPresent(cityOfBirth, forKey: .cityOfBirth)
        try container.encodeIfPresent(occupation, forKey: .occupation)
        try container.encodeIfPresent(employerName, forKey: .employerName)
        try container.encodeIfPresent(identificationType, forKey: .identificationType)
        try container.encodeIfPresent(identificationValue, forKey: .identificationValue)
    }
}

