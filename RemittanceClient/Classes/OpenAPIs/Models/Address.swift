//
// Address.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Address: Codable, JSONEncodable, Hashable {

    /** Full mailing address, formatted for display or use on a mailing label. This field may contain multiple lines, separated by newlines. */
    public var formatted: String?
    /** Full street address component, which may include house number, street name, Post Office Box, and multi-line extended street address information. */
    public var streetAddress: String?
    /** City or locality component. */
    public var locality: String?
    /** State, province, prefecture, or region component. */
    public var region: String?
    /** Zip code or postal code component. */
    public var postalCode: String?
    /** Country name component. */
    public var country: String?

    public init(formatted: String? = nil, streetAddress: String? = nil, locality: String? = nil, region: String? = nil, postalCode: String? = nil, country: String? = nil) {
        self.formatted = formatted
        self.streetAddress = streetAddress
        self.locality = locality
        self.region = region
        self.postalCode = postalCode
        self.country = country
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case formatted
        case streetAddress = "street_address"
        case locality
        case region
        case postalCode = "postal_code"
        case country
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(formatted, forKey: .formatted)
        try container.encodeIfPresent(streetAddress, forKey: .streetAddress)
        try container.encodeIfPresent(locality, forKey: .locality)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(country, forKey: .country)
    }
}

