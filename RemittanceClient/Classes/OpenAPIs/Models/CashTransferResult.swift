//
// CashTransferResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CashTransferResult: Codable, JSONEncodable, Hashable {

    public enum PayerIdentificationType: String, Codable, CaseIterable {
        case pass = "PASS"
        case cpfa = "CPFA"
        case srssa = "SRSSA"
        case nrin = "NRIN"
        case othr = "OTHR"
        case drlc = "DRLC"
        case socs = "SOCS"
        case areg = "AREG"
        case idcd = "IDCD"
        case emid = "EMID"
    }
    /** transaction id of the cash transfer. */
    public var financialTransactionId: String?
    /** status of the cash transfer */
    public var status: String?
    /** contains error if one occurred */
    public var reason: String?
    /** Amount that will be debited from the payer account. */
    public var amount: String?
    /** ISO4217 Currency */
    public var currency: String?
    public var payee: Party?
    /** External id is used as a reference to the transaction. External id is used for reconciliation. The external id will be included in transaction history report. <br>External id is not required to be unique. */
    public var externalId: String?
    /** Country where the request came from */
    public var orginatingCountry: String?
    /** Amount that was sent before any foreign exchange */
    public var originalAmount: String?
    /** ISO4217 Currency of the originalAmoun */
    public var originalCurrency: String?
    /** Message that will be written in the payer transaction history message field. */
    public var payerMessage: String?
    /** Message that will be written in the payee transaction history note field. */
    public var payeeNote: String?
    /** Identification type of the payer */
    public var payerIdentificationType: PayerIdentificationType?
    /** Identification number of the payer */
    public var payerIdentificationNumber: String?
    /** payerIdentity number of the payer */
    public var payerIdentity: String?
    /** FirstName */
    public var payerFirstName: String?
    /** Surname */
    public var payerSurName: String?
    /** LanguageCode */
    public var payerLanguageCode: String?
    /** Email */
    public var payerEmail: String?
    /** Msisdn */
    public var payerMsisdn: String?
    /** GenderCode */
    public var payerGender: String?

    public init(financialTransactionId: String? = nil, status: String? = nil, reason: String? = nil, amount: String? = nil, currency: String? = nil, payee: Party? = nil, externalId: String? = nil, orginatingCountry: String? = nil, originalAmount: String? = nil, originalCurrency: String? = nil, payerMessage: String? = nil, payeeNote: String? = nil, payerIdentificationType: PayerIdentificationType? = nil, payerIdentificationNumber: String? = nil, payerIdentity: String? = nil, payerFirstName: String? = nil, payerSurName: String? = nil, payerLanguageCode: String? = nil, payerEmail: String? = nil, payerMsisdn: String? = nil, payerGender: String? = nil) {
        self.financialTransactionId = financialTransactionId
        self.status = status
        self.reason = reason
        self.amount = amount
        self.currency = currency
        self.payee = payee
        self.externalId = externalId
        self.orginatingCountry = orginatingCountry
        self.originalAmount = originalAmount
        self.originalCurrency = originalCurrency
        self.payerMessage = payerMessage
        self.payeeNote = payeeNote
        self.payerIdentificationType = payerIdentificationType
        self.payerIdentificationNumber = payerIdentificationNumber
        self.payerIdentity = payerIdentity
        self.payerFirstName = payerFirstName
        self.payerSurName = payerSurName
        self.payerLanguageCode = payerLanguageCode
        self.payerEmail = payerEmail
        self.payerMsisdn = payerMsisdn
        self.payerGender = payerGender
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case financialTransactionId
        case status
        case reason
        case amount
        case currency
        case payee
        case externalId
        case orginatingCountry
        case originalAmount
        case originalCurrency
        case payerMessage
        case payeeNote
        case payerIdentificationType
        case payerIdentificationNumber
        case payerIdentity
        case payerFirstName
        case payerSurName
        case payerLanguageCode
        case payerEmail
        case payerMsisdn
        case payerGender
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(financialTransactionId, forKey: .financialTransactionId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(payee, forKey: .payee)
        try container.encodeIfPresent(externalId, forKey: .externalId)
        try container.encodeIfPresent(orginatingCountry, forKey: .orginatingCountry)
        try container.encodeIfPresent(originalAmount, forKey: .originalAmount)
        try container.encodeIfPresent(originalCurrency, forKey: .originalCurrency)
        try container.encodeIfPresent(payerMessage, forKey: .payerMessage)
        try container.encodeIfPresent(payeeNote, forKey: .payeeNote)
        try container.encodeIfPresent(payerIdentificationType, forKey: .payerIdentificationType)
        try container.encodeIfPresent(payerIdentificationNumber, forKey: .payerIdentificationNumber)
        try container.encodeIfPresent(payerIdentity, forKey: .payerIdentity)
        try container.encodeIfPresent(payerFirstName, forKey: .payerFirstName)
        try container.encodeIfPresent(payerSurName, forKey: .payerSurName)
        try container.encodeIfPresent(payerLanguageCode, forKey: .payerLanguageCode)
        try container.encodeIfPresent(payerEmail, forKey: .payerEmail)
        try container.encodeIfPresent(payerMsisdn, forKey: .payerMsisdn)
        try container.encodeIfPresent(payerGender, forKey: .payerGender)
    }
}

