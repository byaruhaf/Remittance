//
// BasicUserInfoJsonResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BasicUserInfoJsonResponse: Codable, JSONEncodable, Hashable {

    /** Given name(s) or first name(s) of the End-User. Note that in some cultures, people can have multiple given names; all can be present, with the names being separated by space characters. */
    public var givenName: String?
    /** Surname(s) or last name(s) of the End-User. Note that in some cultures, people can have multiple family names or no family name; all can be present, with the names being separated by space characters. */
    public var familyName: String?
    /** Account holder birth date. */
    public var birthdate: String?
    /** End-User's locale, represented as a  BCP47 [RFC5646] language tag. This is typically an  ISO 639-1 Alpha-2 [ISO639�|�1] language code in lowercase and an  ISO 3166-1 Alpha-2 [ISO3166�|�1] country code in uppercase, separated by a dash. For example,  en-US or  fr-CA. As a compatibility note, some implementations have used an underscore as the separator rather than a dash, for example,  en_US; Relying Parties may choose to accept this locale syntax as well. */
    public var locale: String?
    /** End-User's gender. Values defined by this specification are female and male. Other values may be used when neither of the defined values are applicable. */
    public var gender: String?
    /** Accountholder status. */
    public var status: String?

    public init(givenName: String? = nil, familyName: String? = nil, birthdate: String? = nil, locale: String? = nil, gender: String? = nil, status: String? = nil) {
        self.givenName = givenName
        self.familyName = familyName
        self.birthdate = birthdate
        self.locale = locale
        self.gender = gender
        self.status = status
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case givenName = "given_name"
        case familyName = "family_name"
        case birthdate
        case locale
        case gender
        case status
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(givenName, forKey: .givenName)
        try container.encodeIfPresent(familyName, forKey: .familyName)
        try container.encodeIfPresent(birthdate, forKey: .birthdate)
        try container.encodeIfPresent(locale, forKey: .locale)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(status, forKey: .status)
    }
}

